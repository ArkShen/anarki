(test-iso "split chops list at given index"
  '((1 2) (3 4))
  (split '(1 2 3 4) 2))

(test-iso "split chops string at given index"
  '((1 2) (3 4))
  (split '(1 2 3 4) 2))

(test-iso "before works when both elems are present"
  t
  (before 3 4 '(1 2 3 4)))
(test-iso "before works when both elems are present - 2"
  nil
  (before 4 3 '(1 2 3 4)))

(test-iso "before works when second elem is absent"
  t
  (before 3 5 '(1 2 3 4)))

(test-iso "before works when first elem is absent"
  nil
  (before 5 3 '(1 2 3 4)))

(test-iso "before works when both elems are absent"
  nil
  (before 6 5 '(1 2 3 4)))

(test-iso "serialize works on nil"
  ()
  (serialize ()))

(test-iso "serialize works on lists"
  '(1 2 3)
  (serialize '(1 2 3)))

(test-iso "serialize works on strings"
  "abc"
  (serialize "abc"))

(test-iso "serialize works on tables"
  '(tagged table ((3 4) (1 2)))
  (serialize (obj 1 2 3 4)))

(test-iso "unserialize complements serialize for nil"
  ()
  (unserialize:serialize ()))

(test-iso "unserialize complements serialize for lists"
  '(1 2 3)
  (unserialize:serialize '(1 2 3)))

(test-iso "unserialize complements serialize for strings"
  "abc"
  (unserialize:serialize "abc"))

(test-iso "unserialize complements serialize for empty tables"
  (table)
  (unserialize:serialize (table)))

(test-iso "unserialize complements serialize for tables"
  (obj 1 2 3 4)
  (unserialize:serialize (obj 1 2 3 4)))

(test-iso "serialize operates on tables inside lists"
  '(1 (tagged table ()) 2 3)
  (serialize `(1 ,(table) 2 3)))

(test-iso "unserialize complements serialize for tables inside lists"
  `(1 ,(table) 2 3)
  (unserialize:serialize `(1 ,(table) 2 3)))

(test-iso "serialize operates on nested tables"
  '(tagged table ((2 3) (1 (tagged table ()))))
  (serialize (obj 1 (table) 2 3)))

(test-iso "unserialize complements serialize for nested tables"
  (obj 1 (table) 2 3)
  (unserialize:serialize (obj 1 (table) 2 3)))

(mac foo (x) `(let y@ (+ ,x 1) (+ y@ ,x)))
(mac foo-bad (x) `(let y (+ ,x 1) (+ y ,x)))
(test-iso "mac gensyms don't capture variables"
  7
  (let y@ 3 (foo y@)))
(test-iso "mac without gensyms does capture variables"
  8  ; probably not what you want
  (let y 3 (foo-bad y)))
